// app/product/[slug]/ProductDetails.tsx optimization with React Query
'use client';

import { useEffect, useState } from 'react';
import { text } from '@/app/styles';
import {
  Button,
  FormControl,
  FormControlLabel,
  Radio,
  RadioGroup,
  TextField,
} from '@mui/material';
import { useCartMutations } from '@woographql/react-hooks';
import { sessionContext, useSession } from '@/client/SessionProvider';
import toast from 'react-hot-toast';
import { LoadingButton } from '@mui/lab';
import { clearLocalStorage, reloadBrowser } from '@/components/utils';
import { addToWaitlist } from '@/lib/graphql';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

const ProductDetails = ({ product }) => {
  const [waitlist, setWaitlist] = useState('');
  const [selectedVariation, setSelectedVariation] = useState(null);
  
  const queryClient = useQueryClient();
  const { cart, customer } = useSession();
  
  const productId = product.databaseId;
  const variationId = selectedVariation?.databaseId;

  // Use React Query for cart operations
  const { mutate: addToCartMutation, isPending } = useMutation({
    mutationFn: async () => {
      const { mutate } = useCartMutations(
        { productId, variationId },
        sessionContext
      );
      
      return mutate('addToCart', { quantity: 1 });
    },
    onSuccess: () => {
      toast.success(`${selectedVariation.name} is added to cart`);
      queryClient.invalidateQueries({ queryKey: ['cart'] });
    },
    onError: (error) => {
      console.error(error);
      if (error.message?.includes('out of stock')) {
        toast.error('Product is currently out of stock.');
      } else {
        toast.error('Cart session expired.');
        clearLocalStorage();
        reloadBrowser();
      }
    }
  });

  // Use React Query for waitlist operations
  const { mutate: addToWaitlistMutation, isPending: waitlistPending } = useMutation({
    mutationFn: async (email) => {
      return addToWaitlist(variationId, email);
    },
    onSuccess: (data) => {
      toast.success(data || 'Added to waitlist successfully!');
      setWaitlist('');
    },
    onError: () => {
      toast.error('Error while adding user to waitlist.');
    }
  });

  const handleWaitlist = (e) => {
    e.preventDefault();
    const email = customer?.id !== 'guest' ? customer?.email : waitlist;
    addToWaitlistMutation(email);
  };

  const handleAddToCart = () => {
    // Check if the item is already in the cart
    const quantityInCart = cart?.contents?.nodes?.find(
      (item) => item.variation?.databaseId === variationId
    )?.quantity;

    if (quantityInCart) {
      toast.success(`${selectedVariation.name} is already added to cart`);
      return;
    }

    addToCartMutation();
  };

  const cartButtonDisabled =
    isPending ||
    selectedVariation?.stockStatus === 'OUT_OF_STOCK' ||
    !selectedVariation;

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className={`${text.lg} font-normal uppercase`}>{product.name}</h1>
        <p className={`${text.lg} font-normal`}>{product.price}</p>
      </div>

      <FormControl>
        <RadioGroup>
          {product.variations.nodes.map((option) => (
            <FormControlLabel
              key={option.id}
              sx={{ width: 'fit-content', mb: 2 }}
              onChange={() => setSelectedVariation(option)}
              checked={selectedVariation?.id === option.id}
              control={<Radio />}
              label={
                <div>
                  <p>{option?.attributes.nodes[0]?.value ?? ''}</p>
                  <p>{option?.price ?? ''}</p>
                </div>
              }
            />
          ))}
        </RadioGroup>
      </FormControl>

      {selectedVariation?.stockStatus === 'OUT_OF_STOCK' ? (
        <form
          onSubmit={handleWaitlist}
          className="flex flex-col gap-4 items-start"
        >
          <p>Sold Out!</p>
          <p>
            Join the waitlist to be emailed when this product becomes available
          </p>
          {customer?.id === 'guest' ? (
            <TextField
              value={waitlist}
              onChange={(e) => setWaitlist(e.target.value)}
              type="email"
              required
              size="small"
            />
          ) : null}
          <Button
            type="submit"
            disabled={waitlistPending}
            className="py-2 px-8 bg-stone-400 w-fit text-white hover:bg-stone-600"
          >
            ADD TO WAITLIST
          </Button>
        </form>
      ) : null}

      <LoadingButton
        onClick={handleAddToCart}
        loading={isPending || !cart}
        disabled={cartButtonDisabled}
        className="py-2 px-8 bg-stone-400 w-fit text-white hover:bg-stone-600"
      >
        ADD TO CART
      </LoadingButton>

      <div dangerouslySetInnerHTML={{ __html: product.description }} />
    </div>
  );
};

export default ProductDetails;
