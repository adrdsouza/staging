// components/accessibility/A11yProvider.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';

type A11yContextType = {
  highContrast: boolean;
  toggleHighContrast: () => void;
  fontSize: number;
  increaseFontSize: () => void;
  decreaseFontSize: () => void;
  resetFontSize: () => void;
  reducedMotion: boolean;
  toggleReducedMotion: () => void;
};

const A11yContext = createContext<A11yContextType | undefined>(undefined);

export const useA11y = () => {
  const context = useContext(A11yContext);
  if (context === undefined) {
    throw new Error('useA11y must be used within an A11yProvider');
  }
  return context;
};

export const A11yProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // Initialize from localStorage if available, otherwise use system preferences
  const [highContrast, setHighContrast] = useState<boolean>(false);
  const [fontSize, setFontSize] = useState<number>(100); // 100%
  const [reducedMotion, setReducedMotion] = useState<boolean>(false);

  useEffect(() => {
    // Load saved preferences from localStorage
    const savedHighContrast = localStorage.getItem('highContrast') === 'true';
    const savedFontSize = parseInt(localStorage.getItem('fontSize') || '100', 10);
    const savedReducedMotion = localStorage.getItem('reducedMotion') === 'true';
    
    // Check for system preference for reduced motion
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    setHighContrast(savedHighContrast);
    setFontSize(savedFontSize);
    setReducedMotion(savedReducedMotion || prefersReducedMotion);
    
    // Apply initial settings
    applyHighContrast(savedHighContrast);
    applyFontSize(savedFontSize);
    applyReducedMotion(savedReducedMotion || prefersReducedMotion);
  }, []);

  const applyHighContrast = (value: boolean) => {
    if (value) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }
    localStorage.setItem('highContrast', String(value));
  };

  const applyFontSize = (percentage: number) => {
    document.documentElement.style.fontSize = `${percentage}%`;
    localStorage.setItem('fontSize', String(percentage));
  };

  const applyReducedMotion = (value: boolean) => {
    if (value) {
      document.documentElement.classList.add('reduced-motion');
    } else {
      document.documentElement.classList.remove('reduced-motion');
    }
    localStorage.setItem('reducedMotion', String(value));
  };

  const toggleHighContrast = () => {
    const newValue = !highContrast;
    setHighContrast(newValue);
    applyHighContrast(newValue);
  };

  const increaseFontSize = () => {
    if (fontSize < 200) { // Max 200%
      const newSize = fontSize + 10;
      setFontSize(newSize);
      applyFontSize(newSize);
    }
  };

  const decreaseFontSize = () => {
    if (fontSize > 80) { // Min 80%
      const newSize = fontSize - 10;
      setFontSize(newSize);
      applyFontSize(newSize);
    }
  };

  const resetFontSize = () => {
    setFontSize(100);
    applyFontSize(100);
  };

  const toggleReducedMotion = () => {
    const newValue = !reducedMotion;
    setReducedMotion(newValue);
    applyReducedMotion(newValue);
  };

  const value = {
    highContrast,
    toggleHighContrast,
    fontSize,
    increaseFontSize,
    decreaseFontSize,
    resetFontSize,
    reducedMotion,
    toggleReducedMotion,
  };

  return (
    <A11yContext.Provider value={value}>
      {children}
    </A11yContext.Provider>
  );
};

// components/accessibility/A11yMenu.tsx
import React from 'react';
import { useA11y } from './A11yProvider';
import { Eye, Type, Move, RotateCcw } from 'lucide-react';

export const A11yMenu: React.FC = () => {
  const { 
    highContrast, 
    toggleHighContrast, 
    fontSize, 
    increaseFontSize, 
    decreaseFontSize, 
    resetFontSize,
    reducedMotion,
    toggleReducedMotion
  } = useA11y();

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <button 
        aria-expanded="false"
        aria-haspopup="true"
        aria-label="Accessibility menu"
        className="bg-slate-700 text-white p-3 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500"
        onClick={() => document.getElementById('a11y-menu')?.classList.toggle('hidden')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
          <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </button>
      
      <div id="a11y-menu" className="hidden absolute bottom-16 right-0 bg-white dark:bg-slate-800 rounded-lg shadow-xl p-4 w-56 border border-slate-200 dark:border-slate-700">
        <div className="text-slate-800 dark:text-white font-medium mb-3 pb-2 border-b border-slate-200 dark:border-slate-700">
          Accessibility Options
        </div>
        
        <div className="space-y-3">
          <div>
            <button 
              onClick={toggleHighContrast}
              aria-pressed={highContrast}
              className="flex items-center space-x-2 w-full p-2 rounded hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
            >
              <Eye className="w-5 h-5" />
              <span>{highContrast ? 'Disable' : 'Enable'} High Contrast</span>
            </button>
          </div>
          
          <div>
            <div className="flex items-center justify-between mb-1 px-2">
              <div className="flex items-center space-x-2">
                <Type className="w-5 h-5" />
                <span>Text Size ({fontSize}%)</span>
              </div>
              <button
                onClick={resetFontSize}
                aria-label="Reset font size"
                className="p-1 rounded hover:bg-slate-100 dark:hover:bg-slate-700"
              >
                <RotateCcw className="w-4 h-4" />
              </button>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={decreaseFontSize}
                aria-label="Decrease font size"
                disabled={fontSize <= 80}
                className="p-2 rounded hover:bg-slate-100 dark:hover:bg-slate-700 disabled:opacity-50"
              >
                A-
              </button>
              <div className="flex-1 h-2 bg-slate-200 dark:bg-slate-700 rounded-full">
                <div 
                  className="h-2 bg-blue-500 rounded-full" 
                  style={{ width: `${((fontSize - 80) / 120) * 100}%` }}
                ></div>
              </div>
              <button
                onClick={increaseFontSize}
                aria-label="Increase font size"
                disabled={fontSize >= 200}
                className="p-2 rounded hover:bg-slate-100 dark:hover:bg-slate-700 disabled:opacity-50"
              >
                A+
              </button>
            </div>
          </div>
          
          <div>
            <button 
              onClick={toggleReducedMotion}
              aria-pressed={reducedMotion}
              className="flex items-center space-x-2 w-full p-2 rounded hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
            >
              <Move className="w-5 h-5" />
              <span>{reducedMotion ? 'Enable' : 'Reduce'} Animations</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// App layout integration
// app/layout.tsx (modified)
'use client';

import Navbar from '@/components/navbar/page';
import './globals.css';
import FooterBar from '@/components/footer/page';
import { SessionProvider } from '@/client/SessionProvider';
import { Toaster } from 'react-hot-toast';
import ReduxProvider from '@/redux/provider';
import { Montserrat } from 'next/font/google';
import { createTheme, ThemeProvider } from '@mui/material';
import { AlertCircle } from 'lucide-react';
import { A11yProvider } from '@/components/accessibility/A11yProvider';
import { A11yMenu } from '@/components/accessibility/A11yMenu';

const font = Montserrat({
  subsets: ['latin'],
  weight: ['200', '300', '400', '500', '600', '700', '800'],
  display: 'swap', // Optimize font loading
});

// Extend the theme with accessibility options
const theme = createTheme({
  typography: {
    fontFamily: `${font.style.fontFamily}, sans-serif`,
  },
  components: {
    MuiButton: {
      defaultProps: {
        disableElevation: true,
      },
      styleOverrides: {
        root: {
          textTransform: 'none', // Better for screen readers
        },
      },
    },
    MuiTextField: {
      defaultProps: {
        variant: 'outlined',
      },
    },
    MuiLink: {
      defaultProps: {
        underline: 'hover',
      },
    },
  },
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang='en' className="scroll-smooth">
      <head>
        <link
          rel='icon'
          href='https://admin.damneddesigns.com/wp-content/uploads/cropped-Asset-d11-32x32.png'
          sizes='32x32'
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="Premium knives and EDC products by Damned Designs" />
      </head>

      <body className={`${font.className} antialiased`} suppressHydrationWarning={true}>
        <ThemeProvider theme={theme}>
          <ReduxProvider>
            <SessionProvider>
              <A11yProvider>
                <div className='flex flex-col min-h-screen'>
                  {/* Skip to content link for keyboard users */}
                  <a 
                    href="#main-content" 
                    className="sr-only focus:not-sr-only focus:absolute focus:z-50 focus:p-4 focus:bg-white focus:text-black"
                  >
                    Skip to content
                  </a>
                  
                  <div className='flex rounded-2xl bg-white z-[999] fixed m-auto w-fit p-5 h-fit left-0 right-0 top-[50px] text-center'>
                    <div className='flex m-auto gap-2 items-center'>
                      <AlertCircle className='h-10 w-10' aria-hidden="true" />
                      <span>We're under maintenance. We apologize for the inconvenience.</span>
                    </div>
                  </div>

                  <Navbar />
                  <main id="main-content" className='flex-1'>{children}</main>
                  <FooterBar />
                  
                  {/* Accessibility menu */}
                  <A11yMenu />
                </div>
              </A11yProvider>
            </SessionProvider>
          </ReduxProvider>
        </ThemeProvider>
        <Toaster 
          position="bottom-center"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
            },
            // Add accessibility attributes
            ariaProps: {
              role: 'status',
              'aria-live': 'polite',
            },
          }}
        />
      </body>
    </html>
  );
}

// CSS for accessibility
// Add this to your globals.css
/*
.high-contrast {
  /* High contrast mode */
  --color-text: #000000;
  --color-background: #ffffff;
  --color-primary: #0000ff;
  --color-accent: #800080;
  --color-border: #000000;
  --color-input: #ffffff;
  --color-input-border: #000000;
}

.high-contrast body {
  background-color: var(--color-background);
  color: var(--color-text);
}

.high-contrast button:not([disabled]),
.high-contrast a {
  color: var(--color-primary);
  border-color: var(--color-border);
  text-decoration: underline;
  text-decoration-thickness: 2px;
}

.high-contrast input,
.high-contrast select,
.high-contrast textarea {
  background-color: var(--color-input);
  color: var(--color-text);
  border: 2px solid var(--color-input-border);
}

.high-contrast img {
  filter: grayscale(100%) contrast(120%);
}

/* Reduced motion */
.reduced-motion * {
  animation-duration: 0.001ms !important;
  animation-iteration-count: 1 !important;
  transition-duration: 0.001ms !important;
  scroll-behavior: auto !important;
}
*/

// Example of an accessible product card
// components/shop/ProductCard.tsx - improved for accessibility
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Product } from '@/types/product';

interface ProductCardProps {
  product: Product;
}

export const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const {
    slug,
    name,
    price,
    image,
    stockStatus,
  } = product;

  const isOutOfStock = stockStatus === 'OUT_OF_STOCK';
  
  return (
    <article 
      className="group relative h-full flex flex-col border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow duration-300"
    >
      <Link 
        href={`/product/${slug}`}
        aria-label={`View ${name} - ${price}`}
        className="flex flex-col h-full"
      >
        <div className="relative pt-[100%] bg-gray-100">
          {isOutOfStock && (
            <div className="absolute top-2 right-2 z-10 bg-gray-800 text-white px-2 py-1 rounded text-xs font-medium" aria-hidden="true">
              Out of Stock
            </div>
          )}
          
          <Image
            src={image?.sourceUrl || '/placeholder-product.jpg'} 
            alt={image?.altText || name}
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            className="object-contain p-4 transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
          />
        </div>
        
        <div className="flex flex-col flex-grow p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-1">{name}</h3>
          <p className="text-gray-700 mt-auto font-semibold">{price}</p>
          
          {isOutOfStock && (
            <span className="sr-only">This product is out of stock</span>
          )}
        </div>
      </Link>
    </article>
  );
};
